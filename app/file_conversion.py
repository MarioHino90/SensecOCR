from typing import Callable, Dict, List, Optional, Union
from postgres import write_documents

from pathlib import Path
# from exiftool import ExifToolHelper
from pdfminer.pdfparser import PDFParser
from pdfminer.pdfdocument import PDFDocument
import pdfreader
import logging
import subprocess
from datetime import datetime, date
import random
from docx2python import docx2python
import exiftool
#from subprocess import Popen, PIPE, STDOUT, run

logger = logging.getLogger(__name__)

BATCH_SIZE = 10


def convert_files_to_docs_patch(
    dir_path: str,
    clean_func: Optional[Callable] = None,
    split_paragraphs: bool = False,
    encoding: Optional[str] = None,
    id_hash_keys: Optional[List[str]] = None,
) -> None:
    """
    Convert all files(.txt, .pdf, .docx) in the sub-directories of the given path to Documents that can be written to a
    Document Store.

    :param dir_path: The path of the directory containing the Files.
    :param clean_func: A custom cleaning function that gets applied to each Document (input: str, output: str).
    :param split_paragraphs: Whether to split text by paragraph.
    :param encoding: Character encoding to use when converting pdf documents.
    :param id_hash_keys: A list of Document attribute names from which the Document ID should be hashed from.
            Useful for generating unique IDs even if the Document contents are identical.
            To ensure you don't have duplicate Documents in your Document Store if texts are
            not unique, you can modify the metadata and pass [`"content"`, `"meta"`] to this field.
            If you do this, the Document ID will be generated by using the content and the defined metadata.
    """

    def process_path(path):
        # metadata extraction here
        meta = {}
        meta["path"] = path
        meta["datecreated"] = None  # get date created
        # etc ...
        return meta

    paths = [p for p in Path(dir_path).glob("**/*")]
    organization_list = ["0100", "0200", "0300", "0400", "0500", "0600", "0700", "0800", "0900", "1000", "1100"]
    classification_list = ["TS", "S", "FOUO", "CUI", "U"]

    # iterate over all files in the directory
    #documents = []
    for idx, path in enumerate(paths):
        # try to extract the metadata from the document
        try:
            with exiftool.ExifToolHelper() as et:
                metadata = et.get_metadata(path)
                for d in metadata:
                    d = {key.split(':')[-1] : val for key, val in d.items()}
                    print("Before using exiftool")
                    print(str(d))
                #if Path(path).suffix == ".pdf":
                # h = open(path, 'rb')
                # d = pdfreader.PDFDocument(h)
                docwrite = {}

                tempdate = d.get("CreateDate") or d.get("FileAccessDate")
                if tempdate:
                    tempdate = tempdate.split()[0]
                    tempdate = datetime.strptime(tempdate, "%Y:%m:%d")
                else:
                    tempdate = datetime.strptime("01-01-1900", "%d-%m-%y").date()
                #Logic to check if exists in metadata
                filetype = d.get("FileType", "")
                if filetype.lower() not in ("pdf", "docx", "txt"):
                    continue
                docwrite["author"] = d.get('Creator', "NA")
                docwrite["datecreated"] = tempdate
                print("*********BEFORE DATE PRINT**************")
                print(type(docwrite["datecreated"]))
                docwrite["organization"] = random.choice(organization_list)
                docwrite["classification"] = random.choice(classification_list)
                docwrite["path"] = str(path)
                write_documents(docwrite)
            # if Path(path).suffix == ".docx":
            #     with docx2python(path) as docx_content:
            #         #Logic to check if exists in metadata
            #         if 'creator' in docx_content.properties:
            #             docwrite["author"] = docx_content.properties["creator"]
            #         else:
            #             docwrite["author"] = "NA"
            #         if 'created' in docx_content.properties:
            #             #print("Creation Date: " + d.metadata['CreationDate'])
            #             docwrite["datecreated"] = docx_content.properties["created"] #datetime.strptime(d.metadata['CreationDate'], "%d-%m-%y").date()
            #         else: 
            #             docwrite["datecreated"] = datetime.strptime("01-01-1900", "%d-%m-%y").date()
            #         docwrite["organization"] = random.choice(organization_list)
            #         docwrite["classification"] = random.choice(classification_list)
            #         docwrite["path"] = str(path)
            #         write_documents(docwrite)               
            #documents.append(document)

        # error handling
        except Exception as e:
            print(f"Error converting {path}: {e}")
